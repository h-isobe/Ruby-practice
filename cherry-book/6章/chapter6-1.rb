##Rubyにおける正規表現オブジェクト

#正規表現はRegexpクラス
regex = /\d{3}-\d{4}/
regext.class #=> Regexp

#マッチした場合はマッチした文字列の開始いちが返る（つまり真）
'123-4567' =~ /\d{3}-\d{4}/ #=> 0

#マッチしない場合はnilが返る（つまり偽）
'hello' =~ /\d{3}-\d{4}/    #=> nil

# if文で=~を使うとマッチしたかどうかを判別できる
if '123-4567' =~ /\d{3}-\d{4}/
  puts 'マッチしました'
else
  puts 'マッチしませんでした'
end
#=> マッチしました

# !~を使うとマッチしなかったときにtrueを、マッチしたときにfalseを返します。
'hello' !~ /\d{3}-\d{4}/     #=> true
'123-4567' !~ /\d{3}-\d{4}/  #=> false


##正規表現のキャプチャ

text = '私の誕生日は1992年9月23日です。'
m = /(\d+)年(\d+)月(\d+)日/.match(text)
m[1] #=> "1992"
m[2] #=> "9"
m[3] #=> "23"

#MatchDateは[]を使って正規表現の処理結果を配列と同じような方法で取得できる。
text = '私の誕生日は1992年9月23日です。'
m = /(\d+)年(\d+)月(\d+)日/.match(text)

#マッチした全体を取得する
m[0] #=> "1992年9月23日"

#キャプチャの1番目を取得
m[1] #=> "1992"

#キャプチャの2番目から2個取得する
m[2,2] #=> ["9", "23"]

#最後のキャプチャを取得する
m[-1] #=> "23"

#Rangeを使って取得する
m[1..3] #=> ["1992", "9", "23"]


##キャプチャの結果に名前を付ける
text = '私の誕生日は1992年9月23日です。'
m = /(?<year>\d+)年(?<month>\d+)月(?<day>\d+)日/.match(text)

#シンボルで名前を指定してキャプチャの結果を取得する
m[:year]  #=> "1992"
m[:month] #=> "9"
m[:day]   #=> "23"

#文字列で指定も可能
m['year'] #=> "1992"

#連番で指定も可能
m[2]      #=> "9"



###正規表現と組み合わせると便利なStringクラスのメソッド

##scanメソッド(引数で渡した正規表現にマッチする部分を配列に入れて返す)
'123 456 789'.scan(/\d+/) #=> ["123", "456", "789"]

#正規表現に（）があると、キャプチャされた部分が配列の配列になって返ってくる
'1997年7月17日 2016年12月31日'.scan(/(\d+)年(\d+)月(\d+)日/) #=> [["1997", "7", "17"], ["2016", "12", "31"]]

#上記と違ってキャプチャまではしたくない。グループ化のみの場合。キャプチャを外すだけ。
'1997年7月17日 2016年12月31日'.scan(/\d+年\d+月\d+日/) #=> ["1997年7月17日", "2016年12月31日"]



##[], slice, slice!([]に正規表現を渡すと、文字列から正規表現にマッチした部分を抜き出す)
text = "郵便番号は123-4567です"
text[/\d{3}-\d{4}/] #=> "123-4567"

text = '123-4567 456-7890' #=> 複数ある場合は最初にマッチした文字列だけ返る
text[/\d{3}-\d{4}/] #=> "123-4567"

#キャプチャを使うと第2引数で何番目のキャプチャを取得するか指定できる
#第2引数がないとマッチした部分全体が返る
text = '誕生日は1992年9月23日です。'
text[/(\d+)年(\d+)月(\d+)日/] #=> "1992年9月23日"

#第2引数を指定して3番目のキャプチャを取得する
text[/(\d+)年(\d+)月(\d+)日/, 3] #=> "23"

#名前付きキャプチャであれば名前で指定もできる
text = '誕生日は1992年9月23日です。'

#シンボルでキャプチャの名前を指定する
text[/(?<year>\d+)年(?<month>\d+)月(?<day>\d+)日/, :day] #=> "23"

#文字列でキャプチャの名前を指定する
text[/(?<year>\d+)年(?<month>\d+)月(?<day>\d+)日/, 'day'] #=> "23"



##splitメソッド(引数の正規表現を渡すと、マッチした文字列を区切り文字にして文字列を分解し、配列として返す)
text = '123,456-789'

#文字列で区切り文字を指定
text.split(',') #=> ["123", "456-789"]

#正規表現を使ってカンマまたはハイフンを区切り文字に指定
text.split(/,|-/) #=> ["123", "456", "789"]



##gsub、gsub!メソッド(第1引数の正規表現にマッチした文字列を、第2引数の文字列で置き換える)
text = '123,456-789'

#第1引数に文字列を渡すと、完全一致する文字列を第2引数で置き換える
text.gsub(',', ':') #=> "123:456-789"

#正規表現を渡すと、マッチした部分を第2引数で置き換える
text.gsub(/,|-/, ':') #=> "123:456:789"

#キャプチャを使うと、第2引数で\1や\2のようにしてキャプチャした文字列を連番で参照できる
text = '誕生日は1992年9月23日です。'
text.gsub(/(\d+)年(\d+)月(\d+)日/, '\1-\2-\3') #=> "誕生日は1992-9-23です。"

#名前付きキャプチャの場合は\k<name>のようにして参照できる
text = '誕生日は1992年9月23日です。'
text.gsub(
  /(?<year>\d+)年(?<month>\d+)月(?<day>\d+)日/, 
  '\k<year>-\k<month>-\k<day>'
)
#=> "誕生日は1992-9-23です。"


#第2引数にハッシュを渡して、変換のルールを指定することもできる
text = '123,456-789'
#カンマはコロンに、ハイフンはスラッシュに置き換える
hash = { ',' => ':', '-' => '/' }
text.gsub(/,|-/, hash) #=> "123:456/789"

#gsub!は文字列の内容を破壊的に置換する
text = '123,456-789'
text.gsub!(/,|-/, ':')
text #=> "123:456:789"
